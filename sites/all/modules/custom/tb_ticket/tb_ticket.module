<?php

function tb_ticket_views_post_execute(&$view){
    // For every tickets view display.

    if($view->name == "tickets"){
        $tickets_to_show = tb_ticket_get_tickets_by_categories($view->current_display);
        if($tickets_to_show !== null){
            foreach($view->result as $key => $val){
                if(!in_array($val->nid, $tickets_to_show)){
                    unset($view->result[$key]);
                }
            }
        }
    }

  
  // Apply working state of defender by default on tickets posted page.
  /*if($view->current_display == 'search_ticket'){
    global $user;
    $profile = profile2_load_by_user($user, 'defender_profile');
    if(!empty($profile)){
      $view->display['search_ticket']->handler->handlers['filter']['field_state_value']->value = $profile->field_working_state[LANGUAGE_NONE][0]['value'];
    }
  }*/
}

function tb_ticket_form_alter(&$form, &$form_state, $form_id){
  // Exposed form in Views.
  if($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-tickets-search-ticket'){
    drupal_add_js(drupal_get_path('module', 'tb_ticket'). '/js/ticket-filters.js');
  }

  // Load standard drupal node form.
  if($form_id == "ticket_node_form" && !user_access("administer content types")){
    // Add custom select library.
    $form['#attached']['js'] = array(
      //drupal_get_path('theme', 'ticketbaby'). '/js/jquery.easydropdown.min.js',
      drupal_get_path('module', 'tb_ticket'). '/js/choosefilebutton.js',
      drupal_get_path('module', 'tb_ticket'). '/js/popup_fields_ticket.js',
    );
    $form['#attached']['css'] = array(
      //drupal_get_path('module', 'tb_ticket'). '/css/easydropdown.css',
      drupal_get_path('module', 'tb_ticket'). '/css/choosefilebutton.css',
    );

    $form['title_markup'] = array(
        "#type" => 'markup',
        "#markup" => "<h2>Fighting traffic tickets made simple.</h2><h3>Ticket Baby allows you to easily find, hire and pay for ticket defence.</h3>",
        "#weight" => -50,
    );

    unset($form['body']);
    
    //$form['field_were_there_any_special_cir'][LANGUAGE_NONE][0]['value']['#description'] = '';
    // Show only fields specified in default settings.
    $fields_to_show = array_map('trim', explode("\n", variable_get("default_ticket_fields", '')));

    // Now we should remove fields that are not in list of what we should show.
    foreach($form as $key => $val){
      if(substr($key, 0, 6) == 'field_'){
        // Which field to show?
        if(!in_array($key, $fields_to_show)){
          unset($form[$key]);
          continue ;
        }else if(isset($form[$key][LANGUAGE_NONE][0]['value'])){
          $form[$key][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = $form[$key][LANGUAGE_NONE][0]['value']['#description'];
        }
        // We use placeholders instead of titles.
        if(is_array($form[$key])){
          //dpm($key);
          if(isset($form[$key]['#title'])){
            $form[$key]['#title_display'] = 'invisible';
            if($key != 'field_date_of_ticket') unset($form[$key]['#description']);
          }
          if(isset($form[$key][LANGUAGE_NONE]['#title'])){
            $form[$key][LANGUAGE_NONE]['#title_display'] = 'invisible';
            $form[$key][LANGUAGE_NONE]['#attributes']['placeholder'] = $form[$key][LANGUAGE_NONE]['#description'];
            if($key != 'field_date_of_ticket') unset($form[$key][LANGUAGE_NONE]['#description']);
          }
          if(isset($form[$key][LANGUAGE_NONE][0]['#title'])){
            $form[$key][LANGUAGE_NONE][0]['#title_display'] = 'invisible';
            if($key != 'field_date_of_ticket') unset($form[$key][LANGUAGE_NONE][0]['#description']);
          }
          if(isset($form[$key][LANGUAGE_NONE][0]['value']['#title'])){
            $form[$key][LANGUAGE_NONE][0]['value']['#title_display'] = 'invisible';
            if($key != 'field_date_of_ticket') unset($form[$key][LANGUAGE_NONE][0]['value']['#description']);
          }
        }
      }
    }
    // ...and save ticket button should be named "save".
    $form['actions']['submit']['#value'] = 'Send';
    $form['actions']['submit']['#attributes']['onclick'] = 'if(!confirm("Are you sure all fields right? Once you sumitted your ticket you couldn\'t edit it")){return false;}';
    
    // ...and we want to be redirected.
    array_push($form['actions']['submit']['#submit'], "tb_ticket_create_ticket_redirect");

    // Add registration.
    array_unshift($form['#validate'], 'tb_ticket_validate_user');
    array_unshift($form['actions']['submit']['#submit'], 'tb_ticket_submit_user');
    if(!user_is_logged_in()){
      $form['pass'] = array(
        '#weight' => 33,
        '#type' => 'password',
        '#title' => 'Password',
        '#title_display' => 'invisible',
        '#required' => TRUE,
        '#attributes' => array('placeholder' => 'Password'),
      );
      $form['pass_confirm'] = array(
        '#weight' => 34,
        '#type' => 'password',
        '#required' => TRUE,
        '#attributes' => array('placeholder' => t('Confirm Password')),
      );
      $form['field_email'][LANGUAGE_NONE][0]['email']['#attributes']['placeholder'] = 'Email';
      $form['field_email'][LANGUAGE_NONE][0]['email']['#title_display'] = 'invisible';
      $form['field_full_name']['#weight'] = 31;
      $form['field_email']['#weight'] = 32;
        // We SHOULD show only location to user until he entered something in this field.
        // So we add specific id to hide other fields by default.
        $form['field_state']['#suffix'] = "<span id='other-fields-of-ticket' class='hidden'>";
        $form['pass_confirm']['#suffix'] = "</span>";
    }else{
      $form['field_full_name']['#access'] = FALSE;
      $form['field_email']['#access'] = FALSE;
    }
  } 
  
  return $form;
}

function tb_ticket_submit_user($form, &$form_state){
  if(!user_is_logged_in()){
    $username = $form_state['values']['field_email'][LANGUAGE_NONE][0]['email'];
    $pass = $form_state['values']['pass'];
    $email = $form_state['values']['field_email'][LANGUAGE_NONE][0]['email'];
    $new_user = array(
      'name' => $username,
      'pass' => $pass,
      'mail' => $email,
      'status' => 1,
      'init' => $email,
      'field_fullname' => array(
        LANGUAGE_NONE => array(
          '0' => array(
            'value' => $form_state['values']['field_full_name'][LANGUAGE_NONE][0]['value'],
          ),
        ),
      ),
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        5 => 'customer',
      ),
    );
    user_save('', $new_user);

    // Log in this user.
    $uid = user_authenticate($username, $pass);
    global $user;
    $user = user_load($uid);
    $login_array = array ('name' => $username);
    user_login_finalize($login_array);
  }
}

function tb_ticket_validate_user($form, &$form_state){
  if(!user_is_logged_in()){
    $email = isset($form_state['values']['field_email'][LANGUAGE_NONE][0]['email']) ? $form_state['values']['field_email'][LANGUAGE_NONE][0]['email'] : '';
    $password = isset($form_state['values']['pass']) ? $form_state['values']['pass'] : '';
    $password_confirm = isset($form_state['values']['pass_confirm']) ? $form_state['values']['pass_confirm'] : '';
    $fullname = isset($form_state['values']['field_full_name'][LANGUAGE_NONE][0]['value']) ? $form_state['values']['field_full_name'][LANGUAGE_NONE][0]['value'] : '';
    if(empty($email)){
      form_set_error('field_email', 'Please enter email.');
    }
    if($password_confirm != $password){
      form_set_error('pass', 'Passwords are not equal.');
    }
    /*if(empty($password)){
      form_set_error('pass', 'Please enter password.');
    }*/
    if(empty($fullname)){
      form_set_error('field_full_name', 'Please enter your fullname.');
    }
    if(user_load_by_mail($email) !== FALSE){
      form_set_error('field_email', 'User with this email is already exists. Please choose other email or login.');
    }
  }else{
    global $user;
    $form_state['values']['field_email'][LANGUAGE_NONE][0]['email'] = $user->mail;
  }
}

function tb_ticket_entity_presave($entity, $type){
  if($type == 'comment'){
    $node = node_load($entity->nid);
    rules_invoke_event('node_commented', $node, $entity);
    rules_invoke_event('node_commented--'. $node->type, $node, $entity);
  }
}

function tb_ticket_create_ticket_redirect($form, &$form_state){
  drupal_goto("ticket-created");
}

/*
 * Returns array of posted, replied, quoted, in progress and defended tickets for current user.
 */

function tb_ticket_get_tickets_by_categories($category){
    global $user;
    switch($category){
        case "posted":
            $tickets = $tickets_q = $tickets_r = array();
            // If status = 0 (open) AND...
            // ...Get all tickets NOT quoted by this defender.
            $tickets_quoted = db_query("
                SELECT DISTINCT nid FROM node JOIN
                    field_data_field_status ON nid = entity_id WHERE field_status_value = 0 AND type='ticket' AND nid NOT IN
                        (SELECT field_ticket_target_id FROM node JOIN
                            field_data_field_ticket ticket ON node.nid = ticket.entity_id WHERE uid = :defender)
            ", array(':defender' => $user->uid));
            // ...Get all tickets NOT replied by this defender.
            $tickets_replied =  db_query("
                SELECT DISTINCT nid FROM node JOIN
                    field_data_field_status ON nid = entity_id WHERE field_status_value = 0 AND type='ticket' AND nid NOT IN
                        (SELECT field_attached_to_target_id ticket_id FROM node JOIN
                            field_data_field_attached_to ticket ON node.nid = ticket.entity_id WHERE entity_id IN
                                (SELECT entity_id FROM field_data_field_users WHERE field_users_target_id=:defender))
            ", array(':defender' => $user->uid));
            foreach($tickets_quoted as $ticket){
                $tickets_q[] = $ticket->nid;
            }
            foreach($tickets_replied as $ticket){
                $tickets_r[] = $ticket->nid;
            }
            // Intersect NOT replied and NOT quoted tickets with status = 0.
            $tickets = array_intersect($tickets_r, $tickets_q);
            return $tickets;
            break;

        case "replied":
            $tickets = $tickets_q = $tickets_r = array();
            // If status = 0 (open) AND...
            // ...Get all tickets NOT quoted by this defender.
            $tickets_quoted = db_query("
                SELECT DISTINCT nid FROM node JOIN
                    field_data_field_status ON nid = entity_id WHERE field_status_value = 0 AND type='ticket' AND nid NOT IN
                        (SELECT field_ticket_target_id FROM node JOIN
                            field_data_field_ticket ticket ON node.nid = ticket.entity_id WHERE uid = :defender)
            ", array(':defender' => $user->uid));
            // ...Get all tickets replied by this defender.
            $tickets_replied =  db_query("
                SELECT DISTINCT nid FROM node JOIN
                    field_data_field_status ON nid = entity_id WHERE field_status_value = 0 AND type='ticket' AND nid IN
                        (SELECT field_attached_to_target_id ticket_id FROM node JOIN
                            field_data_field_attached_to ticket ON node.nid = ticket.entity_id WHERE entity_id IN
                                (SELECT entity_id FROM field_data_field_users WHERE field_users_target_id=:defender))
                /*SELECT DISTINCT nid FROM node JOIN
                    (SELECT field_attached_to_target_id ticket_id FROM node JOIN
                        field_data_field_attached_to ticket ON node.nid = ticket.entity_id WHERE entity_id IN
                            (SELECT entity_id FROM field_data_field_users WHERE field_users_target_id=:defender)) dialog
                    ON node.nid = dialog.ticket_id JOIN
                        field_data_field_status ON nid = entity_id WHERE field_status_value = 0*/
            ", array(':defender' => $user->uid));
            foreach($tickets_quoted as $ticket){
                $tickets_q[] = $ticket->nid;
            }
            foreach($tickets_replied as $ticket){
                $tickets_r[] = $ticket->nid;
            }
            // Intersect NOT quoted tickets and replied tickets with status = 0.
            $tickets = array_intersect($tickets_r, $tickets_q);
            return $tickets;
            break;

        case "quoted":
            $tickets = array();
            // If status = 0 (open) AND...
            // ...Get all tickets quoted by this defender.
            $tickets_quoted = db_query("
                SELECT DISTINCT nid FROM node JOIN
                    field_data_field_status ON nid = entity_id WHERE field_status_value = 0 AND type='ticket' AND nid IN
                        (SELECT field_ticket_target_id FROM node JOIN
                            field_data_field_ticket ticket ON node.nid = ticket.entity_id WHERE uid = :defender)
            ", array(':defender' => $user->uid));

            foreach($tickets_quoted as $ticket){
                $tickets[] = $ticket->nid;
            }
            return $tickets;
            break;

        case "in_progress":
            $tickets = array();
            // If status = 0 (open) AND...
            // ...Get all tickets with status = 1.
            $tickets_query = db_query("
                SELECT DISTINCT nid FROM node JOIN
                    field_data_field_status ON nid = entity_id WHERE field_status_value = 1 AND type='ticket'
            ", array(':defender' => $user->uid));

            foreach($tickets_query as $ticket){
                $tickets[] = $ticket->nid;
            }
            return $tickets;
            break;

        case "defended":
            $tickets = array();
            // If status = 0 (open) AND...
            // ...Get all tickets with status = 2.
            $tickets_query = db_query("
                SELECT DISTINCT nid FROM node JOIN
                    field_data_field_status ON nid = entity_id WHERE field_status_value = 2 AND type='ticket'
            ", array(':defender' => $user->uid));

            foreach($tickets_query as $ticket){
                $tickets[] = $ticket->nid;
            }
            return $tickets;
            break;
    }

    // It means that we have other view, maybe customer's.
    return null;
}